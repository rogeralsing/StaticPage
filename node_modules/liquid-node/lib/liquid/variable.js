// Generated by CoffeeScript 1.7.1
(function() {
  var Liquid, Promise, Variable,
    __slice = [].slice;

  Liquid = require("../liquid");

  Promise = require("bluebird");

  module.exports = Variable = (function() {
    var FilterArgParser, FilterListFragment, VariableNameFragment;

    Variable.FilterParser = RegExp("(?:" + Liquid.FilterSeparator.source + "|(?:\\s*(?!(?:" + Liquid.FilterSeparator.source + "))(?:" + Liquid.QuotedFragment.source + "|\\S+)\\s*)+)");

    VariableNameFragment = RegExp("\\s*(" + Liquid.QuotedFragment.source + ")(.*)");

    FilterListFragment = RegExp("" + Liquid.FilterSeparator.source + "\\s*(.*)");

    FilterArgParser = RegExp("(?:" + Liquid.FilterArgumentSeparator.source + "|" + Liquid.ArgumentSeparator.source + ")\\s*(" + Liquid.QuotedFragment.source + ")");

    function Variable(markup) {
      var filters, match;
      this.markup = markup;
      this.name = null;
      this.filters = [];
      match = VariableNameFragment.exec(this.markup);
      if (!match) {
        return;
      }
      this.name = match[1];
      match = FilterListFragment.exec(match[2]);
      if (!match) {
        return;
      }
      filters = Liquid.Helpers.scan(match[1], Liquid.Variable.FilterParser);
      filters.forEach((function(_this) {
        return function(filter) {
          var filterArgs, filterName;
          match = /\s*(\w+)/.exec(filter);
          if (!match) {
            return;
          }
          filterName = match[1];
          filterArgs = Liquid.Helpers.scan(filter, FilterArgParser);
          filterArgs = Liquid.Helpers.flatten(filterArgs);
          return _this.filters.push([filterName, filterArgs]);
        };
      })(this));
    }

    Variable.prototype.render = function(context) {
      var reducer;
      if (this.name == null) {
        return '';
      }
      reducer = (function(_this) {
        return function(output, filter) {
          var filterArgs;
          filterArgs = filter[1].map(function(a) {
            return context.get(a);
          });
          return Promise.join.apply(Promise, [output].concat(__slice.call(filterArgs))).spread(function() {
            var e, filterArgs, output;
            output = arguments[0], filterArgs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            try {
              return context.invoke.apply(context, [filter[0], output].concat(__slice.call(filterArgs)));
            } catch (_error) {
              e = _error;
              if (!(e instanceof Liquid.FilterNotFound)) {
                throw e;
              }
              throw new Liquid.FilterNotFound("Error - filter '" + filter[0] + "' in '" + _this.markup + "' could not be found.");
            }
          });
        };
      })(this);
      return Promise.cast(context.get(this.name)).then((function(_this) {
        return function(value) {
          return Promise.reduce(_this.filters, reducer, value).then(function(value) {
            if (value instanceof Liquid.Drop) {
              value.context = context;
              return value.toString();
            } else {
              return value;
            }
          }, function(e) {
            return context.handleError(e);
          });
        };
      })(this));
    };

    return Variable;

  })();

}).call(this);

//# sourceMappingURL=variable.map
